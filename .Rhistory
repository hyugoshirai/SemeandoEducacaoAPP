#       message(paste(package, "is not installed. Installing from CRAN."))
#       install.packages(package)
#     }
#   } else {
#     message(paste(package, "is already installed."))
#   }
# }
#
# # Check and install the 'icons' package from GitHub if not already installed
remotes::install_github("mitchelloharawild/icons")
# install_if_needed("icons", github_repo = "mitchelloharawild/icons")
#
# # Packages list
# packages <- c("shiny", "leaflet", "raster", "DT", "shinyWidgets",
#               "sf", "leafem", "mapview", "gdistance", "dplyr",
#               "shinyFiles", "zip", "leaflet.extras",
#               "shinyjs", "classInt", "leastcostpath", "terra", "units", "tools",
#               "shinyalert", "icons", "fontawesome", "RColorBrewer")
# # library(icons)
# # download_fontawesome() #only if needed
#
# # Instalar pacotes que não estão instalados
# new_packages <- packages[!(packages %in% installed.packages()[, "Package"])]
# if (length(new_packages)) {
#   install.packages(new_packages)
# }
# Load required packages ----
library("classInt")
library("dplyr")
library ("DT")
# library("fontawesome")
library("gdistance")
# library("icons")
library("leafem")
library("leaflet")
library("leaflet.extras")
library("leastcostpath")
library("mapview")
library("raster")
library("RColorBrewer")
library("shiny")
library("shinyFiles")
library("shinyWidgets")
library("shinyalert")
library("shinyjs")
library("sf")
library("terra")
library("tools")
library("units")
library("zip")
# terraOptions(memfrac = 0.9, progress  = 1) # Set terra options
#### Source Modules
# Define the directory containing the R script files
modules_directory <- "modules"
# List all .R files in the directory
script_files <- list.files(modules_directory, pattern = "\\.R$", full.names = TRUE)
# Loop through each R file and source it
for (script_file in script_files) {
source(script_file)
print (paste("Sourced", script_file))
}
### Initialize objects ----
# Create objects from sheet
AssignObjectsFromGsheet("https://docs.google.com/spreadsheets/d/1eRSEmnMIIEcS6EUkhOguy_mCRpZRN1vy/edit?usp=sharing&ouid=102538809962333046552&rtpof=true&sd=true")
# Initialize the lists to store the default objects
default_shapefiles <- list() # List for vectors
default_layers <- list() # List for rasters
# Add the objects to the reactive lists based on their type
CategorizeAndReprojectObjectsInGlobalEnv()
# Define custom control names
custom_control <- setdiff (c(names (default_layers), names (default_shapefiles)),
c("Estações de tratamento", "Pontos de captação"))
### 5. Define reactive values  ----
all_points <- reactiveVal(list()) # For storing all points
all_reclassified_rasters <- reactiveVal(list()) # Create a reactive list to hold all reclassified rasters
all_shapefiles <- reactiveVal(list()) # For storing the shapefiles
checkbox_layers <- reactiveVal(c("Original Raster")) # Initialize a reactive value to store the checkbox layers
current_layers <- reactiveVal(character(0)) # Create a reactive list to hold current layers name
default_layers_name <- reactiveVal() # Create a reactive value to store the default layers name
default_layers_reclass_df <- reactiveVal() # Create a reactive value to store the default layers reclassification dataframe
features_list <- reactiveVal(list())  # Create a reactive value to store the features list
dinamic_added <- reactiveVal(list()) # For storing dynamic added layers
downldropdown <- reactiveValues(dropdowns = "layers_dropdown") # Reactive value to store the dropdown identifier
euclidean_dist_rasters <- reactiveValues() # Create a reactive value to store the euclidean distance rasters
euclidean_reclass_df <- reactiveVal() # Reactive value to store the reclassification dataframe for euclidean distance
feature_values_data <- reactiveVal(NULL) # For storing feature values data
layer_colors <- reactiveValues(list = list()) # Redirect layer colors to observe later listItem
rasterized_layer <- reactiveVal(NULL) # For storing rasterized shapefile
reactive_tabs <- reactiveVal(list()) # For storing tab names
raster_data_processed <- reactiveVal(NULL) # For storing the processed raster data
# Rec_LandUse <- reactiveVal(LandUse_rst) # For storing reclassified LandUse data
raster_df <- reactiveVal() # For storing raster data frames
raster_df_list <- reactiveVal(list()) # For storing raster data frames list
rendered_table <- renderDT({
features_table_data()
}, editable = list(target = "cell", disable = list(columns = c(0, 1, 3, 4))), selection = 'multiple', server = FALSE)
# Render the features table
result_raster <- reactiveVal(NULL) # For storing result raster
shapefile_data <- reactiveValues(shp = NULL, colors = list()) # For storing the uploaded shapefile data
shapefile_data_processed <- reactiveVal(NULL) # For storing the processed shapefile data
shapefile_names_list <- reactiveVal(character(0)) # For storing the names of uploaded shapefiles
shortest_path_counter <- reactiveVal(0) # Counter for shortest path
shortest_path_layers <- reactiveValues(list = list()) # Create a reactive value to store the shortest path layers
shortest_path_result <- reactiveVal(NULL) # For storing shortest path result
selected_layer <- reactiveVal(NULL) # For storing the selected layer in the dropdown list
# Note: not necessary to load packages here: this all happens in global.R
# Increase the file upload size limit to 30MB
options(shiny.maxRequestSize = 30 * 1024^2)
library(shiny)
# Run the application
# shinyApp(ui = ui.R, server = server.R)
runApp()
# Load required packages ----
library("classInt")
library("dplyr")
library ("DT")
# library("fontawesome")
library("gdistance")
# library("icons")
library("leafem")
library("leaflet")
library("leaflet.extras")
library("leastcostpath")
library("mapview")
library("raster")
library("RColorBrewer")
library("shiny")
library("shinyFiles")
library("shinyWidgets")
library("shinyalert")
library("shinyjs")
library("sf")
library("terra")
library("tools")
library("units")
library("zip")
AssignObjectsFromGsheet
# Function to read remote GeoJSON files from Google Drive
ReadGDriveGeoJson <- function(shared_link) {
# Extract the file ID from the shared link
file_id <- sub(".*?/d/([^/]+).*", "\\1", shared_link)
# Create the direct download URL
download_link <- paste0("https://drive.usercontent.google.com/download?id=", file_id)
# Read the GeoJSON file directly from the URL using st_read
geojson_data <- st_read(download_link)
# Print and plot to check the data
print(geojson_data)
return(geojson_data)
}
# # Example usage
# # Input shareable link to a GeoJson file on Google Drive
geojson_data <- ReadGDriveGeoJson("https://drive.usercontent.google.com/download?id=1I1omBZzCcNqlEUSzWSmjZAArl_x0ZehZ")
# # Example usage
# # Input shareable link to a GeoJson file on Google Drive
geojson_data <- ReadGDriveGeoJson("https://drive.google.com/file/d/1I1omBZzCcNqlEUSzWSmjZAArl_x0ZehZ/view?usp=sharing")
# # Example usage
# # Input shareable link to a GeoJson file on Google Drive
geojson_data <- ReadGDriveGeoJson("https://drive.google.com/file/d/1I1omBZzCcNqlEUSzWSmjZAArl_x0ZehZ/view?usp=sharing")
Q
# # Optionally plot the data
plot(geojson_data)
# # Example usage
# # Input shareable link to a GeoJson file on Google Drive
geojson_data <- ReadGDriveGeoJson("https://drive.google.com/file/d/1I1omBZzCcNqlEUSzWSmjZAArl_x0ZehZ/view?usp=sharing")
AssignObjectsFromGsheet
# Function to read remote GeoJSON files from Google Drive
ReadGDriveGeoJson <- function(file_id) {
# Create the direct download URL
download_link <- paste0("https://drive.usercontent.google.com/download?id=", file_id)
# Read the GeoJSON file directly from the URL using st_read
geojson_data <- st_read(download_link)
# Print and plot to check the data
print(geojson_data)
return(geojson_data)
}
# # # Example usage
# # # Input shareable link to a GeoJson file on Google Drive
geojson_data <- ReadGDriveGeoJson("d/1I1omBZzCcNqlEUSzWSmjZAArl_x0ZehZ")
# # # Example usage
# # # Input shareable link to a GeoJson file on Google Drive
geojson_data <- ReadGDriveGeoJson("d/1I1omBZzCcNqlEUSzWSmjZAArl_x0ZehZ")
# # # Example usage
# # # Input shareable link to a GeoJson file on Google Drive
geojson_data <- ReadGDriveGeoJson("1I1omBZzCcNqlEUSzWSmjZAArl_x0ZehZ")
# # # Optionally plot the data
plot(geojson_data)
# Function to read remote raster (TIFF) files from Google Drive
ReadGDriveRaster <- function(file_id) {
# Create the direct download URL
download_link <- paste0("https://drive.usercontent.google.com/download?id=", file_id)
# Prepend with /vsicurl/ for GDAL's usage in terra
myurl <- paste0("/vsicurl/", download_link)
# Read the raster data directly from the URL using terra
raster <- rast(myurl)
# Check and print raster information
print(raster)
return(raster)
}
# # Example usage:
# # Input shareable link to a TIFF file on Google Drive
`Uso do solo` <- ReadGDriveRaster ("1o6TCg9miGK8XsZzt6k0rQrv0zplXjJQH")
# # Optionally plot the raster
plot(`Uso do solo`)
# Function to read a raster file from Google Drive using terra package in R
# Load necessary library
if (!require("terra")) install.packages("terra")
library(terra)
# Function to read remote raster (TIFF) files from Google Drive
ReadGDriveRaster <- function(file_id) {
# Create the direct download URL
download_link <- paste0("https://drive.usercontent.google.com/download?id=", file_id)
# Prepend with /vsicurl/ for GDAL's usage in terra
myurl <- paste0("/vsicurl/", download_link)
# Read the raster data directly from the URL using terra
raster <- rast(myurl)
# Check and print raster information
print(raster)
return(raster)
}
# # # Example usage:
# # # Input shareable link to a TIFF file on Google Drive
# `Uso do solo` <- ReadGDriveRaster ("1o6TCg9miGK8XsZzt6k0rQrv0zplXjJQH")
# # # Optionally plot the raster
# plot(`Uso do solo`)
# Function to read the Google Sheet and assign objects
AssignObjectsFromGsheet <- function(sheet_url) {
# Construct the CSV URL from the sheet URL
sheet_id <- sub(".*\\/d\\/([a-zA-Z0-9_-]+).*", "\\1", sheet_url)
csv_url <- paste0("https://docs.google.com/spreadsheets/d/", sheet_id, "/export?format=csv")
# Read the CSV file into a data frame
df <- read.csv(csv_url)
print (df)
# Loop through each row of the dataframe
for (i in 1:nrow(df)) {
file_name <- df$Nome[i]
file_type <- df$Tipo[i]
file_id <- df$id[i]
if (file_type == "Raster") {
assign(file_name, ReadGDriveRaster(file_id), envir = .GlobalEnv)
} else if (file_type == "GeoJSON") {
assign(file_name, ReadGDriveGeoJson(file_id), envir = .GlobalEnv)
}
}
}
# Create objects from sheet
AssignObjectsFromGsheet("https://docs.google.com/spreadsheets/d/1eRSEmnMIIEcS6EUkhOguy_mCRpZRN1vy/edit?usp=sharing&ouid=102538809962333046552&rtpof=true&sd=true")
sheet_url <- "https://docs.google.com/spreadsheets/d/1eRSEmnMIIEcS6EUkhOguy_mCRpZRN1vy/edit?usp=sharing&ouid=102538809962333046552&rtpof=true&sd=true"
# Construct the CSV URL from the sheet URL
sheet_id <- sub(".*\\/d\\/([a-zA-Z0-9_-]+).*", "\\1", sheet_url)
csv_url <- paste0("https://docs.google.com/spreadsheets/d/", sheet_id, "/export?format=csv")
sheet_id
csv_url
# Read the CSV file into a data frame
df <- read.csv(csv_url)
print (df)
# Function to read the Google Sheet and assign objects
AssignObjectsFromGsheet <- function(sheet_url) {
# Construct the CSV URL from the sheet URL
sheet_id <- sub(".*\\/d\\/([a-zA-Z0-9_-]+).*", "\\1", sheet_url)
csv_url <- paste0("https://docs.google.com/spreadsheets/d/", sheet_id, "/export?format=csv")
# Read the CSV file into a data frame
df <- read.csv(csv_url)
print (df)
# Loop through each row of the dataframe
for (i in 1:nrow(df)) {
file_name <- df$Nome[i]
file_type <- df$Tipo[i]
file_id <- df$id[i]
if (file_type == "Raster") {
assign(file_name, ReadGDriveRaster(file_id), envir = .GlobalEnv)
} else if (file_type == "GeoJSON") {
assign(file_name, ReadGDriveGeoJson(file_id), envir = .GlobalEnv)
}
}
}
# Create objects from sheet
AssignObjectsFromGsheet("https://docs.google.com/spreadsheets/d/1eRSEmnMIIEcS6EUkhOguy_mCRpZRN1vy/edit?usp=sharing&ouid=102538809962333046552&rtpof=true&sd=true")
# Create objects from sheet
AssignObjectsFromGsheet("https://docs.google.com/spreadsheets/d/1eRSEmnMIIEcS6EUkhOguy_mCRpZRN1vy/edit?usp=sharing&ouid=102538809962333046552&rtpof=true&sd=true")
# Replace "path/to/your/shapefile.shp" with the actual path to your shapefile
shapefile_path <- "H:/My Drive/SemeandoEducacaoAPP/Dados/Shapefiles/pol_bioma.shp"
sf_object <- st_read(shapefile_path)
# Replace "path/to/your/output.rds" with the desired path for your RDS file
rds_path <- "H:/My Drive/SemeandoEducacaoAPP/Dados/Shapefiles/pol_bioma.rds"
saveRDS(sf_object, rds_path)
readRDS_object <- readRDS(rds_path)
plot(readRDS_object)
# crop the shapefile to a specific bounding box
# Replace with your desired bounding box coordinates
bbox <- c(xmin = -60, ymin = -30, xmax = -50, ymax = -20)
cropped_sf_object <- st_crop(sf_object, xmin = -60, ymin = -30, xmax = -50, ymax = -20)
cropped_sf_object
# crop the shapefile to a specific bounding box
# Replace with your desired bounding box coordinates
bbox <- c(xmin = 179,684.327063, ymin = 7,307,265.891322, xmax = 557,016.700840, ymax = 7,633,341.113038)
cropped_sf_object <- st_crop(sf_object, bbox)
cropped_sf_object
plot(cropped_sf_object)
# crop the shapefile to a specific bounding box
# Replace with your desired bounding box coordinates
bbox <- c(xmin = 179684.327063, ymin = 7307265.891322, xmax = 557016.700840, ymax = 7633341.113038)
cropped_sf_object <- st_crop(sf_object, bbox)
plot(cropped_sf_object)
file_id <- "1gDp2yHcvkd8oaE9U-QnYDSeMfni5KjOT"
download_link <- paste0("https://drive.usercontent.google.com/download?id=", file_id)
RDS_data <- readRDS(download_link)
RDS_data <- st_read(download_link)
download_link
myurl <- paste0("/vsicurl/", download_link)
# Read the raster data directly from the URL using terra
RDS_data <- readRDS(myurl)
# Note: not necessary to load packages here: this all happens in global.R
# Increase the file upload size limit to 30MB
options(shiny.maxRequestSize = 30 * 1024^2)
library(shiny)
# Run the application
# shinyApp(ui = ui.R, server = server.R)
runApp()
# Note: not necessary to load packages here: this all happens in global.R
# Increase the file upload size limit to 30MB
options(shiny.maxRequestSize = 30 * 1024^2)
library(shiny)
# Run the application
# shinyApp(ui = ui.R, server = server.R)
runApp()
# Note: not necessary to load packages here: this all happens in global.R
# Increase the file upload size limit to 30MB
options(shiny.maxRequestSize = 30 * 1024^2)
library(shiny)
# Run the application
# shinyApp(ui = ui.R, server = server.R)
runApp()
custom_control
# Create objects from sheet
AssignObjectsFromGsheet("https://docs.google.com/spreadsheets/d/1eRSEmnMIIEcS6EUkhOguy_mCRpZRN1vy/edit?usp=sharing&ouid=102538809962333046552&rtpof=true&sd=true")
CategorizeAndReprojectDefaultShapefilesAndRasters <- function(object, object_name) {
# Check if the objectect is a GeoJSON (sf)
if (inherits(object, "sf")) {
# Reproject to WGS 84 (EPSG:4326)
object <- st_transform(object, crs = 4326)
# Update the object in the global environment
assign(object_name, object, envir = .GlobalEnv)
# Assign to the default_shapefiles list
default_shapefiles[[object_name]] <- object
}
# Check if the object is a Raster (SpatRaster)
if (inherits(object, "SpatRaster")) {
# Assign to the default_layers list
default_layers[[object_name]] <- object
}
}
# Function to read the Google Sheet and assign objects
AssignObjectsFromGsheet <- function(sheet_url) {
# Construct the CSV URL from the sheet URL
sheet_id <- sub(".*\\/d\\/([a-zA-Z0-9_-]+).*", "\\1", sheet_url)
csv_url <- paste0("https://docs.google.com/spreadsheets/d/", sheet_id, "/export?format=csv")
# Read the CSV file into a data frame
df <- read.csv(csv_url)
print (df)
# Loop through each row of the dataframe
for (i in 1:nrow(df)) {
file_name <- df$Nome[i]
file_type <- df$Tipo[i]
file_id <- df$id[i]
if (file_type == "Raster") {
assign(file_name, ReadGDriveRaster(file_id), envir = .GlobalEnv)
} else if (file_type == "GeoJSON") {
assign(file_name, ReadGDriveGeoJson(file_id), envir = .GlobalEnv)
}
CategorizeAndReprojectDefaultShapefilesAndRasters(file_name, as.character(file_type))
}
}
# Create objects from sheet
AssignObjectsFromGsheet("https://docs.google.com/spreadsheets/d/1eRSEmnMIIEcS6EUkhOguy_mCRpZRN1vy/edit?usp=sharing&ouid=102538809962333046552&rtpof=true&sd=true")
default_shapefiles
View(default_shapefiles)
CategorizeAndReprojectDefaultShapefilesAndRasters <- function(object, object_name) {
# Check if the objectect is a GeoJSON (sf)
if (inherits(object, "sf")) {
# Reproject to WGS 84 (EPSG:4326)
object <- st_transform(object, crs = 4326)
# Update the object in the global environment
assign(object_name, object, envir = .GlobalEnv)
# Assign to the default_shapefiles list
default_shapefiles[[object_name]] <- object
}
# Check if the object is a Raster (SpatRaster)
if (inherits(object, "SpatRaster")) {
# Assign to the default_layers list
default_layers[[object_name]] <- object
}
}
# Print a summary of categorized objects
message("Shapefiles assigned to list: ", paste(names(default_shapefiles), collapse = ", "))
# Load required packages ----
library("classInt")
library("dplyr")
library ("DT")
# library("fontawesome")
library("gdistance")
# library("icons")
library("leafem")
library("leaflet")
library("leaflet.extras")
library("leastcostpath")
library("mapview")
library("raster")
library("RColorBrewer")
library("shiny")
library("shinyFiles")
library("shinyWidgets")
library("shinyalert")
library("shinyjs")
library("sf")
library("terra")
library("tools")
library("units")
library("zip")
# Initialize the lists to store the default objects
default_shapefiles <- list() # List for vectors
default_layers <- list() # List for rasters
# Create objects from sheet
AssignObjectsFromGsheet("https://docs.google.com/spreadsheets/d/1eRSEmnMIIEcS6EUkhOguy_mCRpZRN1vy/edit?usp=sharing&ouid=102538809962333046552&rtpof=true&sd=true")
# Function to read the Google Sheet and assign objects
AssignObjectsFromGsheet <- function(sheet_url) {
# Construct the CSV URL from the sheet URL
sheet_id <- sub(".*\\/d\\/([a-zA-Z0-9_-]+).*", "\\1", sheet_url)
csv_url <- paste0("https://docs.google.com/spreadsheets/d/", sheet_id, "/export?format=csv")
# Read the CSV file into a data frame
df <- read.csv(csv_url)
print (df)
# Loop through each row of the dataframe
for (i in 1:nrow(df)) {
file_name <- df$Nome[i]
file_type <- df$Tipo[i]
file_id <- df$id[i]
if (file_type == "Raster") {
assign(file_name, ReadGDriveRaster(file_id), envir = .GlobalEnv)
} else if (file_type == "GeoJSON") {
assign(file_name, ReadGDriveGeoJson(file_id), envir = .GlobalEnv)
}
CategorizeAndReprojectDefaultShapefilesAndRasters(file_name, as.character(file_type))
}
}
# Create objects from sheet
AssignObjectsFromGsheet("https://docs.google.com/spreadsheets/d/1eRSEmnMIIEcS6EUkhOguy_mCRpZRN1vy/edit?usp=sharing&ouid=102538809962333046552&rtpof=true&sd=true")
# Function to read a raster file from Google Drive using terra package in R
# Load necessary library
if (!require("terra")) install.packages("terra")
library(terra)
# Function to read remote raster (TIFF) files from Google Drive
ReadGDriveRaster <- function(file_id) {
# Create the direct download URL
download_link <- paste0("https://drive.usercontent.google.com/download?id=", file_id)
# Prepend with /vsicurl/ for GDAL's usage in terra
myurl <- paste0("/vsicurl/", download_link)
# Read the raster data directly from the URL using terra
raster <- rast(myurl)
# Check and print raster information
print(raster)
return(raster)
}
# # # Example usage:
# # # Input shareable link to a TIFF file on Google Drive
# `Uso do solo` <- ReadGDriveRaster ("1o6TCg9miGK8XsZzt6k0rQrv0zplXjJQH")
# # # Optionally plot the raster
# plot(`Uso do solo`)
# Function to read a GeoJSON file from Google Drive in R
# Load necessary library
if (!require("sf")) install.packages("sf")
library(sf)
# Function to read remote GeoJSON files from Google Drive
ReadGDriveGeoJson <- function(file_id) {
# Create the direct download URL
download_link <- paste0("https://drive.usercontent.google.com/download?id=", file_id)
# Read the GeoJSON file directly from the URL using st_read
geojson_data <- st_read(download_link)
# Print and plot to check the data
print(geojson_data)
return(geojson_data)
}
# # # # Example usage
# # # # Input shareable link to a GeoJson file on Google Drive
# geojson_data <- ReadGDriveGeoJson("1I1omBZzCcNqlEUSzWSmjZAArl_x0ZehZ")
# # # # Optionally plot the data
# plot(geojson_data)
# Create objects from sheet
AssignObjectsFromGsheet("https://docs.google.com/spreadsheets/d/1eRSEmnMIIEcS6EUkhOguy_mCRpZRN1vy/edit?usp=sharing&ouid=102538809962333046552&rtpof=true&sd=true")
CategorizeAndReprojectDefaultShapefilesAndRasters <- function(object, object_name) {
# Check if the objectect is a GeoJSON (sf)
if (inherits(object, "sf")) {
# Reproject to WGS 84 (EPSG:4326)
object <- st_transform(object, crs = 4326)
# Update the object in the global environment
assign(object_name, object, envir = .GlobalEnv)
# Assign to the default_shapefiles list
default_shapefiles[[object_name]] <- object
}
# Check if the object is a Raster (SpatRaster)
if (inherits(object, "SpatRaster")) {
# Assign to the default_layers list
default_layers[[object_name]] <- object
}
# Assign the lists to the global environment
assign("default_shapefiles", default_shapefiles, envir = .GlobalEnv)
assign("default_layers", default_layers, envir = .GlobalEnv)
# Print a summary of categorized objects
message("Shapefiles assigned to list: ", paste(names(default_shapefiles), collapse = ", "))
message("Rasters assigned to list: ", paste(names(default_layers), collapse = ", "))
}
# Create objects from sheet
AssignObjectsFromGsheet("https://docs.google.com/spreadsheets/d/1eRSEmnMIIEcS6EUkhOguy_mCRpZRN1vy/edit?usp=sharing&ouid=102538809962333046552&rtpof=true&sd=true")
