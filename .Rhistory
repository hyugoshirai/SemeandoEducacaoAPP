# shinyApp(ui = ui.R, server = server.R)
runApp()
# Note: not necessary to load packages here: this all happens in global.R
# Increase the file upload size limit to 30MB
options(shiny.maxRequestSize = 30 * 1024^2)
source("global.R") # Global settings, e.g. reading in of packages, data
# Run the application
# shinyApp(ui = ui.R, server = server.R)
runApp()
# Note: not necessary to load packages here: this all happens in global.R
# Increase the file upload size limit to 30MB
options(shiny.maxRequestSize = 30 * 1024^2)
source("global.R") # Global settings, e.g. reading in of packages, data
# Run the application
# shinyApp(ui = ui.R, server = server.R)
runApp()
# Note: not necessary to load packages here: this all happens in global.R
# Increase the file upload size limit to 30MB
options(shiny.maxRequestSize = 30 * 1024^2)
source("global.R") # Global settings, e.g. reading in of packages, data
# Run the application
# shinyApp(ui = ui.R, server = server.R)
runApp()
shiny::runApp()
# Note: not necessary to load packages here: this all happens in global.R
# Increase the file upload size limit to 30MB
options(shiny.maxRequestSize = 30 * 1024^2)
source("global.R") # Global settings, e.g. reading in of packages, data
# Note: not necessary to load packages here: this all happens in global.R
# Increase the file upload size limit to 30MB
options(shiny.maxRequestSize = 30 * 1024^2)
# Run the application
# shinyApp(ui = ui.R, server = server.R)
runApp()
library(shiny)
# Run the application
# shinyApp(ui = ui.R, server = server.R)
runApp()
# Create objects from sheet
AssignObjectsFromGsheet("https://docs.google.com/spreadsheets/d/1eRSEmnMIIEcS6EUkhOguy_mCRpZRN1vy/edit?usp=sharing&ouid=102538809962333046552&rtpof=true&sd=true")
#### Source Modules
# Define the directory containing the R script files
modules_directory <- "modules"
# List all .R files in the directory
script_files <- list.files(modules_directory, pattern = "\\.R$", full.names = TRUE)
# Loop through each R file and source it
for (script_file in script_files) {
source(script_file)
print (paste("Sourced", script_file))
}
# Create objects from sheet
AssignObjectsFromGsheet("https://docs.google.com/spreadsheets/d/1eRSEmnMIIEcS6EUkhOguy_mCRpZRN1vy/edit?usp=sharing&ouid=102538809962333046552&rtpof=true&sd=true")
# Initialize the lists to store the default objects
default_shapefiles <- list() # List for vectors
default_layers <- list() # List for rasters
# Add the objects to the reactive lists based on their type
CategorizeAndReprojectObjectsInGlobalEnv()
# Create objects from sheet
AssignObjectsFromGsheet("https://docs.google.com/spreadsheets/d/1eRSEmnMIIEcS6EUkhOguy_mCRpZRN1vy/edit?usp=sharing&ouid=102538809962333046552&rtpof=true&sd=true")
sheet_url <- "https://docs.google.com/spreadsheets/d/1eRSEmnMIIEcS6EUkhOguy_mCRpZRN1vy/edit?usp=sharing&ouid=102538809962333046552&rtpof=true&sd=true"
# Construct the CSV URL from the sheet URL
sheet_id <- sub(".*\\/d\\/([a-zA-Z0-9_-]+).*", "\\1", sheet_url)
csv_url <- paste0("https://docs.google.com/spreadsheets/d/", sheet_id, "/export?format=csv")
# Read the CSV file into a data frame
df <- read.csv(csv_url)
df
# Construct the CSV URL from the sheet URL
sheet_id <- sub(".*\\/d\\/([a-zA-Z0-9_-]+).*", "\\1", sheet_url)
csv_url <- paste0("https://docs.google.com/spreadsheets/d/", sheet_id, "/export?format=csv")
# Read the CSV file into a data frame
df <- read.csv(csv_url)
df
sheet_id <- sub(".*\\/d\\/([a-zA-Z0-9_-]+).*", "\\1", sheet_url)
csv_url <- paste0("https://docs.google.com/spreadsheets/d/", sheet_id, "/export?format=csv")
# Read the CSV file into a data frame
df <- read.csv(csv_url)
df
O
# Create objects from sheet
AssignObjectsFromGsheet("https://docs.google.com/spreadsheets/d/1eRSEmnMIIEcS6EUkhOguy_mCRpZRN1vy/edit?usp=sharing&ouid=102538809962333046552&rtpof=true&sd=true")
# Initialize the lists to store the default objects
default_shapefiles <- list() # List for vectors
default_layers <- list() # List for rasters
# Add the objects to the reactive lists based on their type
CategorizeAndReprojectObjectsInGlobalEnv()
# Define custom control names
custom_control <- setdiff (c(names (default_layers), names (default_shapefiles)),
c())
### 5. Define reactive values  ----
all_points <- reactiveVal(list()) # For storing all points
all_reclassified_rasters <- reactiveVal(list()) # Create a reactive list to hold all reclassified rasters
all_shapefiles <- reactiveVal(list()) # For storing the shapefiles
checkbox_layers <- reactiveVal(c("Original Raster")) # Initialize a reactive value to store the checkbox layers
current_layers <- reactiveVal(character(0)) # Create a reactive list to hold current layers name
default_layers_name <- reactiveVal() # Create a reactive value to store the default layers name
default_layers_reclass_df <- reactiveVal() # Create a reactive value to store the default layers reclassification dataframe
features_list <- reactiveVal(list())  # Create a reactive value to store the features list
dinamic_added <- reactiveVal(list()) # For storing dynamic added layers
downldropdown <- reactiveValues(dropdowns = "layers_dropdown") # Reactive value to store the dropdown identifier
euclidean_dist_rasters <- reactiveValues() # Create a reactive value to store the euclidean distance rasters
euclidean_reclass_df <- reactiveVal() # Reactive value to store the reclassification dataframe for euclidean distance
feature_values_data <- reactiveVal(NULL) # For storing feature values data
layer_colors <- reactiveValues(list = list()) # Redirect layer colors to observe later listItem
rasterized_layer <- reactiveVal(NULL) # For storing rasterized shapefile
reactive_tabs <- reactiveVal(list()) # For storing tab names
raster_data_processed <- reactiveVal(NULL) # For storing the processed raster data
# Rec_LandUse <- reactiveVal(LandUse_rst) # For storing reclassified LandUse data
raster_df <- reactiveVal() # For storing raster data frames
raster_df_list <- reactiveVal(list()) # For storing raster data frames list
rendered_table <- renderDT({
features_table_data()
}, editable = list(target = "cell", disable = list(columns = c(0, 1, 3))), selection = 'multiple', server = FALSE) # Render the features table
result_raster <- reactiveVal(NULL) # For storing result raster
shapefile_data <- reactiveValues(shp = NULL, colors = list()) # For storing the uploaded shapefile data
shapefile_data_processed <- reactiveVal(NULL) # For storing the processed shapefile data
shapefile_names_list <- reactiveVal(character(0)) # For storing the names of uploaded shapefiles
shortest_path_counter <- reactiveVal(0) # Counter for shortest path
shortest_path_layers <- reactiveValues(list = list()) # Create a reactive value to store the shortest path layers
shortest_path_result <- reactiveVal(NULL) # For storing shortest path result
selected_layer <- reactiveVal(NULL) # For storing the selected layer in the dropdown list
### 6. Define custom control names for map ----
custom_control <- setdiff (c(names (default_raster), names (default_shapefiles), names (dinamic_added)), "capt_agua")
### 7. Source Modules ----
# Define the directory containing the R script files
modules_directory <- "modules"
# List all .R files in the directory
script_files <- list.files(modules_directory, pattern = "\\.R$", full.names = TRUE)
# Loop through each R file and source it
for (script_file in script_files) {
source(script_file)
}
# This script converts shapefiles to GeoJSON format using the sf package in R.
# Load necessary library
if (!require("sf")) install.packages("sf")
library(sf)
# Define the conversion function with an additional parameter for the file pattern
ConvertShapefileToGeojson <- function(shapefile_path, output_geojson_path, pattern = "\\Areas_Especiais.shp$") {
# Ensure the output directory exists
if (!dir.exists(output_geojson_path)) {
dir.create(output_geojson_path, recursive = TRUE)
}
# List all files in the shapefile_path matching the given pattern
files <- list.files(shapefile_path, pattern = pattern, full.names = TRUE)
# Loop through each file and convert to GeoJSON
for (file in files) {
# Extract the base name of the file (without extension)
base_name <- tools::file_path_sans_ext(basename(file))
# Define the output GeoJSON file path
output_geojson_file <- file.path(output_geojson_path, paste0(base_name, ".geojson"))
# Convert the shapefile to GeoJSON
sf::st_write(sf::st_read(file), output_geojson_file, driver = "GeoJSON")
# Print the conversion message
print(paste("Converted", file, "to", output_geojson_file))
}
}
output_geojson_path <- "H:/My Drive/SemeandoEducacaoAPP/Dados/GeoJSON"
# # Example of using a different pattern
# convert_files_to_geojson(shapefile_path, output_geojson_path, pattern = "\\.gdb$")
shapefile_path <- "H:/My Drive/SemeandoEducacaoAPP/Dados/Shapefiles"
# # Convert shapefiles using default pattern
ConvertShapefileToGeojson(shapefile_path, output_geojson_path)
# Define the conversion function with an additional parameter for the file pattern
ConvertShapefileToGeojson <- function(shapefile_path, output_geojson_path, pattern = "\\UCs_project.shp$") {
# Ensure the output directory exists
if (!dir.exists(output_geojson_path)) {
dir.create(output_geojson_path, recursive = TRUE)
}
# List all files in the shapefile_path matching the given pattern
files <- list.files(shapefile_path, pattern = pattern, full.names = TRUE)
# Loop through each file and convert to GeoJSON
for (file in files) {
# Extract the base name of the file (without extension)
base_name <- tools::file_path_sans_ext(basename(file))
# Define the output GeoJSON file path
output_geojson_file <- file.path(output_geojson_path, paste0(base_name, ".geojson"))
# Convert the shapefile to GeoJSON
sf::st_write(sf::st_read(file), output_geojson_file, driver = "GeoJSON")
# Print the conversion message
print(paste("Converted", file, "to", output_geojson_file))
}
}
# # Example of using a different pattern
# convert_files_to_geojson(shapefile_path, output_geojson_path, pattern = "\\.gdb$")
shapefile_path <- "H:/My Drive/SemeandoEducacaoAPP/Dados/Shapefiles"
output_geojson_path <- "H:/My Drive/SemeandoEducacaoAPP/Dados/GeoJSON"
# # Convert shapefiles using default pattern
ConvertShapefileToGeojson(shapefile_path, output_geojson_path)
# Define the conversion function with an additional parameter for the file pattern
ConvertShapefileToGeojson <- function(shapefile_path, output_geojson_path, pattern = "\\pol_UCs.shp$") {
# Ensure the output directory exists
if (!dir.exists(output_geojson_path)) {
dir.create(output_geojson_path, recursive = TRUE)
}
# List all files in the shapefile_path matching the given pattern
files <- list.files(shapefile_path, pattern = pattern, full.names = TRUE)
# Loop through each file and convert to GeoJSON
for (file in files) {
# Extract the base name of the file (without extension)
base_name <- tools::file_path_sans_ext(basename(file))
# Define the output GeoJSON file path
output_geojson_file <- file.path(output_geojson_path, paste0(base_name, ".geojson"))
# Convert the shapefile to GeoJSON
sf::st_write(sf::st_read(file), output_geojson_file, driver = "GeoJSON")
# Print the conversion message
print(paste("Converted", file, "to", output_geojson_file))
}
}
# # Example of using a different pattern
# convert_files_to_geojson(shapefile_path, output_geojson_path, pattern = "\\.gdb$")
shapefile_path <- "H:/My Drive/SemeandoEducacaoAPP/Dados/Shapefiles"
output_geojson_path <- "H:/My Drive/SemeandoEducacaoAPP/Dados/GeoJSON"
# # Convert shapefiles using default pattern
ConvertShapefileToGeojson(shapefile_path, output_geojson_path)
# Create objects from sheet
AssignObjectsFromGsheet("https://docs.google.com/spreadsheets/d/1eRSEmnMIIEcS6EUkhOguy_mCRpZRN1vy/edit?usp=sharing&ouid=102538809962333046552&rtpof=true&sd=true")
default_layers
# Add the objects to the reactive lists based on their type
CategorizeAndReprojectObjectsInGlobalEnv()
# Create objects from sheet
AssignObjectsFromGsheet("https://docs.google.com/spreadsheets/d/1eRSEmnMIIEcS6EUkhOguy_mCRpZRN1vy/edit?usp=sharing&ouid=102538809962333046552&rtpof=true&sd=true")
# Initialize the lists to store the default objects
default_shapefiles <- list() # List for vectors
default_layers <- list() # List for rasters
# Add the objects to the reactive lists based on their type
CategorizeAndReprojectObjectsInGlobalEnv()
# Define custom control names
custom_control <- setdiff (c(names (default_layers), names (default_shapefiles)),
c())
# Initialize the lists to store the default objects
default_shapefiles <- list() # List for vectors
# Create objects from sheet
AssignObjectsFromGsheet("https://docs.google.com/spreadsheets/d/1eRSEmnMIIEcS6EUkhOguy_mCRpZRN1vy/edit?usp=sharing&ouid=102538809962333046552&rtpof=true&sd=true")
# Initialize the lists to store the default objects
default_shapefiles <- list() # List for vectors
default_layers <- list() # List for rasters
# Add the objects to the reactive lists based on their type
CategorizeAndReprojectObjectsInGlobalEnv()
# Define custom control names
custom_control <- setdiff (c(names (default_layers), names (default_shapefiles)),
c())
sheet_url
# Construct the CSV URL from the sheet URL
sheet_id <- sub(".*\\/d\\/([a-zA-Z0-9_-]+).*", "\\1", sheet_url)
csv_url <- paste0("https://docs.google.com/spreadsheets/d/", sheet_id, "/export?format=csv")
# Read the CSV file into a data frame
df <- read.csv(csv_url)
df
# Create objects from sheet
AssignObjectsFromGsheet("https://docs.google.com/spreadsheets/d/1eRSEmnMIIEcS6EUkhOguy_mCRpZRN1vy/edit?usp=sharing&ouid=102538809962333046552&rtpof=true&sd=true")
# Initialize the lists to store the default objects
default_shapefiles <- list() # List for vectors
default_layers <- list() # List for rasters
# Add the objects to the reactive lists based on their type
CategorizeAndReprojectObjectsInGlobalEnv()
# Define custom control names
custom_control <- setdiff (c(names (default_layers), names (default_shapefiles)),
c())
custom_control
# Note: not necessary to load packages here: this all happens in global.R
# Increase the file upload size limit to 30MB
options(shiny.maxRequestSize = 30 * 1024^2)
library(shiny)
# Run the application
# shinyApp(ui = ui.R, server = server.R)
runApp()
# Note: not necessary to load packages here: this all happens in global.R
# Increase the file upload size limit to 30MB
options(shiny.maxRequestSize = 30 * 1024^2)
library(shiny)
# Run the application
# shinyApp(ui = ui.R, server = server.R)
runApp()
# Note: not necessary to load packages here: this all happens in global.R
# Increase the file upload size limit to 30MB
options(shiny.maxRequestSize = 30 * 1024^2)
library(shiny)
# Run the application
# shinyApp(ui = ui.R, server = server.R)
runApp()
# Note: not necessary to load packages here: this all happens in global.R
# Increase the file upload size limit to 30MB
options(shiny.maxRequestSize = 30 * 1024^2)
library(shiny)
# Run the application
# shinyApp(ui = ui.R, server = server.R)
runApp()
# Note: not necessary to load packages here: this all happens in global.R
# Increase the file upload size limit to 30MB
options(shiny.maxRequestSize = 30 * 1024^2)
library(shiny)
# Run the application
# shinyApp(ui = ui.R, server = server.R)
runApp()
# Note: not necessary to load packages here: this all happens in global.R
# Increase the file upload size limit to 30MB
options(shiny.maxRequestSize = 30 * 1024^2)
library(shiny)
# Run the application
# shinyApp(ui = ui.R, server = server.R)
runApp()
# Note: not necessary to load packages here: this all happens in global.R
# Increase the file upload size limit to 30MB
options(shiny.maxRequestSize = 30 * 1024^2)
library(shiny)
# Run the application
# shinyApp(ui = ui.R, server = server.R)
runApp()
`Unidades de conservação`
names(`Unidades de conservação`)
# This script converts shapefiles to GeoJSON format using the sf package in R.
# Load necessary library
if (!require("sf")) install.packages("sf")
library(sf)
# Define the conversion function with an additional parameter for the file pattern
ConvertShapefileToGeojson <- function(shapefile_path, output_geojson_path, pattern = "\\pol_UCs.shp$") {
# Ensure the output directory exists
if (!dir.exists(output_geojson_path)) {
dir.create(output_geojson_path, recursive = TRUE)
}
# List all files in the shapefile_path matching the given pattern
files <- list.files(shapefile_path, pattern = pattern, full.names = TRUE)
# Loop through each file and convert to GeoJSON
for (file in files) {
# Extract the base name of the file (without extension)
base_name <- tools::file_path_sans_ext(basename(file))
# Define the output GeoJSON file path
output_geojson_file <- file.path(output_geojson_path, paste0(base_name, ".geojson"))
# Convert the shapefile to GeoJSON
sf::st_write(sf::st_read(file), output_geojson_file, driver = "GeoJSON")
# Print the conversion message
print(paste("Converted", file, "to", output_geojson_file))
}
}
# # Example of using a different pattern
# convert_files_to_geojson(shapefile_path, output_geojson_path, pattern = "\\.gdb$")
shapefile_path <- "H:/My Drive/SemeandoEducacaoAPP/Dados/Shapefiles"
output_geojson_path <- "H:/My Drive/SemeandoEducacaoAPP/Dados/GeoJSON"
# # Convert shapefiles using default pattern
ConvertShapefileToGeojson(shapefile_path, output_geojson_path)
# This script converts shapefiles to GeoJSON format using the sf package in R.
# Load necessary library
if (!require("sf")) install.packages("sf")
library(sf)
# This script converts shapefiles to GeoJSON format using the sf package in R.
# Load necessary library
if (!require("sf")) install.packages("sf")
library(sf)
# Define the conversion function with an additional parameter for the file pattern
ConvertShapefileToGeojson <- function(shapefile_path, output_geojson_path, pattern = "\\pol_UCs.shp$") {
# Ensure the output directory exists
if (!dir.exists(output_geojson_path)) {
dir.create(output_geojson_path, recursive = TRUE)
}
# List all files in the shapefile_path matching the given pattern
files <- list.files(shapefile_path, pattern = pattern, full.names = TRUE)
# Loop through each file and convert to GeoJSON
for (file in files) {
# Extract the base name of the file (without extension)
base_name <- tools::file_path_sans_ext(basename(file))
# Define the output GeoJSON file path
output_geojson_file <- file.path(output_geojson_path, paste0(base_name, ".geojson"))
# Convert the shapefile to GeoJSON
sf::st_write(sf::st_read(file), output_geojson_file, driver = "GeoJSON", delete_layer = TRUE)
# Print the conversion message
print(paste("Converted", file, "to", output_geojson_file))
}
}
# # Example of using a different pattern
# convert_files_to_geojson(shapefile_path, output_geojson_path, pattern = "\\.gdb$")
shapefile_path <- "H:/My Drive/SemeandoEducacaoAPP/Dados/Shapefiles"
output_geojson_path <- "H:/My Drive/SemeandoEducacaoAPP/Dados/GeoJSON"
# # Convert shapefiles using default pattern
ConvertShapefileToGeojson(shapefile_path, output_geojson_path)
# This script converts shapefiles to GeoJSON format using the sf package in R.
# Load necessary library
if (!require("sf")) install.packages("sf")
library(sf)
# Define the conversion function with an additional parameter for the file pattern
ConvertShapefileToGeojson <- function(shapefile_path, output_geojson_path, pattern = "\\pol_UCs.shp$") {
# Ensure the output directory exists
if (!dir.exists(output_geojson_path)) {
dir.create(output_geojson_path, recursive = TRUE)
}
# List all files in the shapefile_path matching the given pattern
files <- list.files(shapefile_path, pattern = pattern, full.names = TRUE)
# Loop through each file and convert to GeoJSON
for (file in files) {
# Extract the base name of the file (without extension)
base_name <- tools::file_path_sans_ext(basename(file))
# Define the output GeoJSON file path
output_geojson_file <- file.path(output_geojson_path, paste0(base_name, ".geojson"))
# Convert the shapefile to GeoJSON
sf::st_write(sf::st_read(file), output_geojson_file, driver = "GeoJSON", delete_dsn = TRUE)
# Print the conversion message
print(paste("Converted", file, "to", output_geojson_file))
}
}
# # Example of using a different pattern
# convert_files_to_geojson(shapefile_path, output_geojson_path, pattern = "\\.gdb$")
shapefile_path <- "H:/My Drive/SemeandoEducacaoAPP/Dados/Shapefiles"
output_geojson_path <- "H:/My Drive/SemeandoEducacaoAPP/Dados/GeoJSON"
# # Convert shapefiles using default pattern
ConvertShapefileToGeojson(shapefile_path, output_geojson_path)
# This script converts shapefiles to GeoJSON format using the sf package in R.
# Load necessary library
if (!require("sf")) install.packages("sf")
library(sf)
# Define the conversion function with an additional parameter for the file pattern
ConvertShapefileToGeojson <- function(shapefile_path, output_geojson_path, pattern = "\\pol_UCs.shp$") {
# Ensure the output directory exists
if (!dir.exists(output_geojson_path)) {
dir.create(output_geojson_path, recursive = TRUE)
}
# List all files in the shapefile_path matching the given pattern
files <- list.files(shapefile_path, pattern = pattern, full.names = TRUE)
# Loop through each file and convert to GeoJSON
for (file in files) {
# Extract the base name of the file (without extension)
base_name <- tools::file_path_sans_ext(basename(file))
# Define the output GeoJSON file path
output_geojson_file <- file.path(output_geojson_path, paste0(base_name, ".geojson"))
# Convert the shapefile to GeoJSON
sf::st_write(sf::st_read(file), output_geojson_file, driver = "GeoJSON")
# Print the conversion message
print(paste("Converted", file, "to", output_geojson_file))
}
}
# # Example of using a different pattern
# convert_files_to_geojson(shapefile_path, output_geojson_path, pattern = "\\.gdb$")
shapefile_path <- "H:/My Drive/SemeandoEducacaoAPP/Dados/Shapefiles"
output_geojson_path <- "H:/My Drive/SemeandoEducacaoAPP/Dados/GeoJSON"
# # Convert shapefiles using default pattern
ConvertShapefileToGeojson(shapefile_path, output_geojson_path)
# Note: not necessary to load packages here: this all happens in global.R
# Increase the file upload size limit to 30MB
options(shiny.maxRequestSize = 30 * 1024^2)
library(shiny)
# Run the application
# shinyApp(ui = ui.R, server = server.R)
runApp()
# Note: not necessary to load packages here: this all happens in global.R
# Increase the file upload size limit to 30MB
options(shiny.maxRequestSize = 30 * 1024^2)
library(shiny)
# Run the application
# shinyApp(ui = ui.R, server = server.R)
runApp()
View(`Uso do solo`)
# Note: not necessary to load packages here: this all happens in global.R
# Increase the file upload size limit to 30MB
options(shiny.maxRequestSize = 30 * 1024^2)
library(shiny)
# Run the application
# shinyApp(ui = ui.R, server = server.R)
runApp()
View(`Uso do solo`)
`Uso do solo`
# Note: not necessary to load packages here: this all happens in global.R
# Increase the file upload size limit to 30MB
options(shiny.maxRequestSize = 30 * 1024^2)
library(shiny)
# Run the application
# shinyApp(ui = ui.R, server = server.R)
runApp()
default_shapefiles
names (default_shapefiles)
# Note: not necessary to load packages here: this all happens in global.R
# Increase the file upload size limit to 30MB
options(shiny.maxRequestSize = 30 * 1024^2)
library(shiny)
# Run the application
# shinyApp(ui = ui.R, server = server.R)
runApp()
# Note: not necessary to load packages here: this all happens in global.R
# Increase the file upload size limit to 30MB
options(shiny.maxRequestSize = 30 * 1024^2)
library(shiny)
# Run the application
# shinyApp(ui = ui.R, server = server.R)
runApp()
# Note: not necessary to load packages here: this all happens in global.R
# Increase the file upload size limit to 30MB
options(shiny.maxRequestSize = 30 * 1024^2)
library(shiny)
# Run the application
# shinyApp(ui = ui.R, server = server.R)
runApp()
default_layers
names (default_layers)
names (default_shapefiles)
# Note: not necessary to load packages here: this all happens in global.R
# Increase the file upload size limit to 30MB
options(shiny.maxRequestSize = 30 * 1024^2)
library(shiny)
# Run the application
# shinyApp(ui = ui.R, server = server.R)
runApp()
setShapeStyle
# Note: not necessary to load packages here: this all happens in global.R
# Increase the file upload size limit to 30MB
options(shiny.maxRequestSize = 30 * 1024^2)
library(shiny)
# Run the application
# shinyApp(ui = ui.R, server = server.R)
runApp()
# Note: not necessary to load packages here: this all happens in global.R
# Increase the file upload size limit to 30MB
options(shiny.maxRequestSize = 30 * 1024^2)
library(shiny)
# Run the application
# shinyApp(ui = ui.R, server = server.R)
runApp()
